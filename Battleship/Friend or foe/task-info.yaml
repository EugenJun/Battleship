type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Table.java
  visible: true
  text: |+
    package battleship;

    public class Table {
        char[][] battleCells = {
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
        };
        char[] verticalIndices = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
        int[] horizontalIndices = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        public char[] getVerticalIndices() {
            return this.verticalIndices;
        }

        public int[] getHorizontalIndices() {
            return this.horizontalIndices;
        }

        protected void drawTable() {

            char[] verticalIndices = getVerticalIndices();
            int[] horizontalIndices = getHorizontalIndices();

            System.out.print(" ");
            for (int horIndex : horizontalIndices) {
                System.out.print(" " + horIndex);
            }
            System.out.println();

            for (int i = 0; i < verticalIndices.length; i++) {
                System.out.print(verticalIndices[i] + " ");
                for (int j = 0; j < verticalIndices.length; j++) {
                    System.out.print(battleCells[i][j] + " ");
                }
                System.out.println();
            }
            System.out.println(" ");
        }

        protected void updateTable(int firstNumInd, int firstAlphaInd, int secondNumInd, int secondAlphaInd,
                                   int minAlphaInd, int maxAlphaInd, int minNumInd, int maxNumInd) {

            if (firstNumInd == secondNumInd) {
                for (int i = firstNumInd - 1; i < firstNumInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd; ++j) {
                        this.setBattleCell(j, i, 'O');
                    }
                }
            } else if (firstAlphaInd == secondAlphaInd) {
                for (int i = minNumInd - 1; i < maxNumInd; ++i) {
                    this.setBattleCell(firstAlphaInd, i, 'O');
                }
            }
        }

        protected void updateTable(int numInd, int alphaInd, boolean isHit) {
            if(isHit) {
                setBattleCell(alphaInd, numInd, 'X');
            } else {
                setBattleCell(alphaInd, numInd, 'M');
            }
        }

        public char getBattleCell(int vertIndex, int horIndex) {
            return battleCells[vertIndex][horIndex];
        }

        public void setBattleCell(int vertIndex, int horIndex, char cellStatus) {
            battleCells[vertIndex][horIndex] = cellStatus;
        }
    }

  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |-
    package battleship;

    import java.util.Scanner;

    public class Player {

        int numOfShips;
        String[] battleshipNames;
        int[] numOfCells;
        Scanner scanner = new Scanner(System.in);
        Table playerTable;
        Table foggedPlayerTable;
        boolean isHavingShips;
        Ship aircraftCarrier;
        Ship battleship;
        Ship submarine;
        Ship cruiser;
        Ship destroyer;

        public Player() {
            this.numOfShips = 5;
            this.playerTable = new Table();
            this.foggedPlayerTable = new Table();
            this.isHavingShips = true;
            this.aircraftCarrier = new Ship("Aircraft Carrier", 5, new int[4]);
            this.battleship = new Ship("Battleship", 4, new int[4]);
            this.submarine = new Ship("Submarine", 3, new int[4]);
            this.cruiser = new Ship("Cruiser", 3, new int[4]);
            this.destroyer = new Ship("Destroyer", 2, new int[4]);
            this.battleshipNames = new String[]{aircraftCarrier.battleShipName, battleship.battleShipName,
                    submarine.battleShipName, cruiser.battleShipName, destroyer.battleShipName};
            this.numOfCells = new int[]{aircraftCarrier.numOfCells, battleship.numOfCells, submarine.numOfCells,
                    cruiser.numOfCells, destroyer.numOfCells};
        }

        protected void allocateBattleships()  {
            this.playerTable.drawTable();
            int counter = 0;

            while (this.numOfShips > 0) {
                System.out.println("Enter the coordinates of the " + this.battleshipNames[counter] +
                        " (" + this.numOfCells[counter] + " cells): ");
                String userInput = scanner.nextLine().trim();
                String[] numericalIndexes = userInput.split("[a-zA-Z\\s]+");
                String[] alphabeticalIndexes = userInput.split("[0-9\\s]+");
                int firstNumericIndex = Integer.parseInt(numericalIndexes[1]);
                int secondNumericIndex = Integer.parseInt(numericalIndexes[2]);
                int firstAlphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[0].charAt(0));
                int secondAlphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[1].charAt(0));
                int minAlphaInd = Math.min(secondAlphaIndex, firstAlphaIndex);
                int maxAlphaInd = Math.max(secondAlphaIndex, firstAlphaIndex);
                int minNumInd = Math.min(secondNumericIndex, firstNumericIndex);
                int maxNumInd = Math.max(secondNumericIndex, firstNumericIndex);

                if (this.checkShipPlacementCoordinates(firstNumericIndex, firstAlphaIndex,
                        secondNumericIndex, secondAlphaIndex, this.numOfCells[counter],
                        minAlphaInd, maxAlphaInd, minNumInd, maxNumInd)) {
                    this.playerTable.updateTable(firstNumericIndex, firstAlphaIndex, secondNumericIndex, secondAlphaIndex,
                            minAlphaInd, maxAlphaInd, minNumInd, maxNumInd);
                    this.playerTable.drawTable();
                    switch (counter) {
                        case 0 -> {
                            aircraftCarrier.shipCoords[0] = minNumInd;
                            aircraftCarrier.shipCoords[1] = maxNumInd;
                            aircraftCarrier.shipCoords[2] = minAlphaInd;
                            aircraftCarrier.shipCoords[3] = maxAlphaInd;
                        }
                        case 1 -> {
                            battleship.shipCoords[0] = minNumInd;
                            battleship.shipCoords[1] = maxNumInd;
                            battleship.shipCoords[2] = minAlphaInd;
                            battleship.shipCoords[3] = maxAlphaInd;
                        }
                        case 2 -> {
                            submarine.shipCoords[0] = minNumInd;
                            submarine.shipCoords[1] = maxNumInd;
                            submarine.shipCoords[2] = minAlphaInd;
                            submarine.shipCoords[3] = maxAlphaInd;
                        }
                        case 3 -> {
                            cruiser.shipCoords[0] = minNumInd;
                            cruiser.shipCoords[1] = maxNumInd;
                            cruiser.shipCoords[2] = minAlphaInd;
                            cruiser.shipCoords[3] = maxAlphaInd;
                        }
                        case 4 -> {
                            destroyer.shipCoords[0] = minNumInd;
                            destroyer.shipCoords[1] = maxNumInd;
                            destroyer.shipCoords[2] = minAlphaInd;
                            destroyer.shipCoords[3] = maxAlphaInd;
                        }
                    }
                    counter++;
                    this.numOfShips--;
                }
            }
        }

        private boolean checkShipPlacementCoordinates(int firstNumInd, int firstAlphaInd, int secondNumInd,
                                                      int secondAlphaInd, int numOfShipCells, int minAlphaInd,
                                                      int maxAlphaInd, int minNumInd, int maxNumInd) {

            boolean verticalCoordinatesCheck = Math.abs(secondAlphaInd - firstAlphaInd) + 1 == numOfShipCells;
            boolean horizontalCheck = Math.abs(secondNumInd - firstNumInd) + 1 == numOfShipCells;

            if ((firstNumInd <= 0 || firstNumInd > 10) || (secondNumInd <= 0 || secondNumInd > 10) ||
                    (firstAlphaInd == -1) || (secondAlphaInd == -1)) {
                System.out.print("\nError! You must enter a horizontal coordinates between 0 and 10" +
                        " and vertical coordinates between A and J. ");
                return false;
            } else if (firstNumInd == secondNumInd && verticalCoordinatesCheck) {
                return this.checkCellsByEqualNumeric(minAlphaInd, maxAlphaInd, minNumInd);
            } else if (horizontalCheck && firstAlphaInd == secondAlphaInd) {
                return this.checkCellsByEqualAlpha(minNumInd, maxNumInd, minAlphaInd);
            } else {
                System.out.print("\nError! Wrong ship location! ");
                return false;
            }
        }

        private boolean checkShotCoordinates(int numInd, int alphaInd) {
            if (numInd <= 0 || numInd > 10 || alphaInd == -1) {
                System.out.print("""

                        Error! You must enter a horizontal coordinates between 0 and 10 and vertical coordinates between A and J.\s

                        """);
                return false;
            }
            return true;
        }

        private void recordHits(int numericIndex, int alphaIndex){
            if ((numericIndex >= aircraftCarrier.shipCoords[0] && numericIndex <= aircraftCarrier.shipCoords[1]) &&
                    (alphaIndex >= aircraftCarrier.shipCoords[2] && alphaIndex <= aircraftCarrier.shipCoords[3])) {
                numOfCells[0]--;
            } else if ((numericIndex >= battleship.shipCoords[0] && numericIndex <= battleship.shipCoords[1]) &&
                    (alphaIndex >= battleship.shipCoords[2] && alphaIndex <= battleship.shipCoords[3])) {
                numOfCells[1]--;
            } else if ((numericIndex >= submarine.shipCoords[0] && numericIndex <= submarine.shipCoords[1]) &&
                    (alphaIndex >= submarine.shipCoords[2] && alphaIndex <= submarine.shipCoords[3])) {
                numOfCells[2]--;
            } else if ((numericIndex >= cruiser.shipCoords[0] && numericIndex <= cruiser.shipCoords[1]) &&
                    (alphaIndex >= cruiser.shipCoords[2] && alphaIndex <= cruiser.shipCoords[3])) {
                numOfCells[3]--;
            } else if ((numericIndex >= destroyer.shipCoords[0] && numericIndex <= destroyer.shipCoords[1]) &&
                    (alphaIndex >= destroyer.shipCoords[2] && alphaIndex <= destroyer.shipCoords[3])) {
                numOfCells[4]--;
            }
        }

        private boolean checkSunkShips(){
            for (int i = 0; i < numOfCells.length; i++) {
                if (numOfCells[i] == 0) {
                    System.out.println("You sank a ship! Specify a new target:");
                    numOfCells[i] = -1;
                    return true;
                }
            }
            return false;
        }

        protected void makeShot() {
            this.foggedPlayerTable.drawTable();
            System.out.println("Take a shot!\n");
            int sunkShipsCounter = 0;

            while (this.isHavingShips) {
                String userShotInput = scanner.nextLine().trim();
                String[] numericalIndexes = userShotInput.split("[a-zA-Z\\s]+");
                String[] alphabeticalIndexes = userShotInput.split("[0-9\\s]+");
                int numericIndex = Integer.parseInt(numericalIndexes[1]);
                int alphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[0].charAt(0));

                if (checkShotCoordinates(numericIndex, alphaIndex)) {
                    if (this.playerTable.getBattleCell(alphaIndex, numericIndex - 1) == 'O') {
                        this.foggedPlayerTable.updateTable(numericIndex - 1, alphaIndex, true);
                        this.playerTable.updateTable(numericIndex - 1, alphaIndex, true);
                        this.foggedPlayerTable.drawTable();
                        recordHits(numericIndex, alphaIndex);
                        if (!checkSunkShips()) {
                            System.out.println("You hit a ship! Try again:");
                        } else {
                            sunkShipsCounter++;
                            if (sunkShipsCounter == 5) {
                                System.out.println("You sank the last ship. You won. Congratulations!");
                                this.isHavingShips = false;
                            }
                        }

                    } else if (this.playerTable.getBattleCell(alphaIndex, numericIndex - 1) == '~') {
                        this.foggedPlayerTable.updateTable(numericIndex - 1, alphaIndex, false);
                        this.playerTable.updateTable(numericIndex - 1, alphaIndex, false);
                        this.foggedPlayerTable.drawTable();
                        System.out.println("You missed. Try again:");
                    } else {
                        this.foggedPlayerTable.drawTable();
                        System.out.println("You missed!");
                    }
                }
            }
        }

        private boolean checkCellsByEqualNumeric(int minAlphaInd, int maxAlphaInd, int numInd) {
            if (numInd == 1 && minAlphaInd == 0) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10 && minAlphaInd == 0) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 1 && maxAlphaInd == 9) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10 && maxAlphaInd == 9) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (maxAlphaInd == 9 || minAlphaInd == 0) {
                for (int i = numInd - 2; i <= numInd; i++) {
                    if (maxAlphaInd == 9) {
                        for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                            if (!(playerTable.getBattleCell(j, i) == '~')) {
                                System.out.print("\nError! Cannot place it here! ");
                                return false;
                            }
                        }
                    } else {
                        for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                            if (!(playerTable.getBattleCell(j, i) == '~')) {
                                System.out.print("\nError! Cannot place it here! ");
                                return false;
                            }
                        }
                    }

                }
            } else if (numInd == 1) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else {
                for (int i = numInd - 2; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        private boolean checkCellsByEqualAlpha(int minNumInd, int maxNumInd, int alphaInd) {
            if (alphaInd == 0 && minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 0 && maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9 && minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9 && maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9) {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 0) {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        String battleShipName;
        int numOfCells;
        int[] shipCoords;

        Ship(String battleShipName, int numOfCells, int[] shipCoords) {
            this.battleShipName = battleShipName;
            this.numOfCells = numOfCells;
            this.shipCoords = shipCoords;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Thu, 05 Jan 2023 13:39:39 UTC"
record: -1
