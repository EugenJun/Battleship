type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Table.java
  visible: true
  text: |+
    package battleship;

    public class Table {
        char[][] battleCells = {
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
                {'~', '~', '~', '~', '~', '~', '~', '~', '~', '~'},
        };
        char[] verticalIndices = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
        int[] horizontalIndices = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        public char[] getVerticalIndices() {
            return this.verticalIndices;
        }

        public int[] getHorizontalIndices() {
            return this.horizontalIndices;
        }

        protected void drawTable() {

            char[] verticalIndices = getVerticalIndices();
            int[] horizontalIndices = getHorizontalIndices();

            System.out.print(" ");
            for (int horIndex : horizontalIndices) {
                System.out.print(" " + horIndex);
            }
            System.out.println();

            for (int i = 0; i < verticalIndices.length; i++) {
                System.out.print(verticalIndices[i] + " ");
                for (int j = 0; j < verticalIndices.length; j++) {
                    System.out.print(battleCells[i][j] + " ");
                }
                System.out.println();
            }
            System.out.println(" ");
        }

        protected void updateTable(int firstNumInd, int firstAlphaInd, int secondNumInd, int secondAlphaInd,
                                   int minAlphaInd, int maxAlphaInd, int minNumInd, int maxNumInd) {

            if (firstNumInd == secondNumInd) {
                for (int i = firstNumInd - 1; i < firstNumInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd; ++j) {
                        this.setBattleCell(j, i, 'O');
                    }
                }
            } else if (firstAlphaInd == secondAlphaInd) {
                for (int i = minNumInd - 1; i < maxNumInd; ++i) {
                    this.setBattleCell(firstAlphaInd, i, 'O');
                }
            }
        }

        protected void updateTable(int numInd, int alphaInd, boolean isHit) {
            if(isHit) {
                setBattleCell(alphaInd, numInd, 'X');
            } else {
                setBattleCell(alphaInd, numInd, 'M');
            }
        }

        public char getBattleCell(int vertIndex, int horIndex) {
            return battleCells[vertIndex][horIndex];
        }

        public void setBattleCell(int vertIndex, int horIndex, char cellStatus) {
            battleCells[vertIndex][horIndex] = cellStatus;
        }
    }

  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |-
    package battleship;

    import javax.swing.table.TableRowSorter;
    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class Player {

        int numOfShips;
        String[] battleshipNames = {"Aircraft Carrier", "Battleship", "Submarine", "Cruiser", "Destroyer"};
        int[] numOfCells = {5, 4, 3, 3, 2};
        Scanner scanner = new Scanner(System.in);
        Table playerTable;
        Table foggedPlayerTable;
        boolean isHavingShips;

        public Player() {
            this.numOfShips = 5;
            this.playerTable = new Table();
            this.foggedPlayerTable = new Table();
            this.isHavingShips = true;
        }


        protected void allocateBattleships() throws InputMismatchException {
            this.playerTable.drawTable();
            int counter = 0;

            while (this.numOfShips > 0) {
                System.out.println("Enter the coordinates of the " + this.battleshipNames[counter] +
                        " (" + this.numOfCells[counter] + " cells): ");
                String userInput = scanner.nextLine().trim();
                String[] numericalIndexes = userInput.split("[a-zA-Z\\s]+");
                String[] alphabeticalIndexes = userInput.split("[0-9\\s]+");
                int firstNumericIndex = Integer.parseInt(numericalIndexes[1]);
                int secondNumericIndex = Integer.parseInt(numericalIndexes[2]);
                int firstAlphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[0].charAt(0));
                int secondAlphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[1].charAt(0));
                int minAlphaInd = Math.min(secondAlphaIndex, firstAlphaIndex);
                int maxAlphaInd = Math.max(secondAlphaIndex, firstAlphaIndex);
                int minNumInd = Math.min(secondNumericIndex, firstNumericIndex);
                int maxNumInd = Math.max(secondNumericIndex, firstNumericIndex);

                if (this.checkShipPlacementCoordinates(firstNumericIndex, firstAlphaIndex,
                        secondNumericIndex, secondAlphaIndex, this.numOfCells[counter],
                        minAlphaInd, maxAlphaInd, minNumInd, maxNumInd)) {
                    this.playerTable.updateTable(firstNumericIndex, firstAlphaIndex, secondNumericIndex, secondAlphaIndex,
                            minAlphaInd, maxAlphaInd, minNumInd, maxNumInd);
                    this.playerTable.drawTable();
                    counter++;
                    this.numOfShips--;
                }
            }
        }

        private boolean checkShipPlacementCoordinates(int firstNumInd, int firstAlphaInd, int secondNumInd,
                                                      int secondAlphaInd, int numOfShipCells, int minAlphaInd,
                                                      int maxAlphaInd, int minNumInd, int maxNumInd) {

            boolean verticalCoordinatesCheck = Math.abs(secondAlphaInd - firstAlphaInd) + 1 == numOfShipCells;
            boolean horizontalCheck = Math.abs(secondNumInd - firstNumInd) + 1 == numOfShipCells;

            if ((firstNumInd <= 0 || firstNumInd > 10) || (secondNumInd <= 0 || secondNumInd > 10) ||
                    (firstAlphaInd == -1) || (secondAlphaInd == -1)) {
                System.out.print("\nError! You must enter a horizontal coordinates between 0 and 10" +
                        " and vertical coordinates between A and J. ");
                return false;
            } else if (firstNumInd == secondNumInd && verticalCoordinatesCheck) {
                return this.checkCellsByEqualNumeric(minAlphaInd, maxAlphaInd, minNumInd);
            } else if (horizontalCheck && firstAlphaInd == secondAlphaInd) {
                return this.checkCellsByEqualAlpha(minNumInd, maxNumInd, minAlphaInd);
            } else {
                System.out.print("\nError! Wrong ship location! ");
                return false;
            }
        }

        private boolean checkShotCoordinates(int numInd, int alphaInd) {
            if (numInd <= 0 || numInd > 10 || alphaInd == -1) {
                System.out.print("\nError! You must enter a horizontal coordinates between 0 and 10" +
                        " and vertical coordinates between A and J. \n\n");
                return false;
            }
            return true;
        }

        protected void makeShot() {
            this.foggedPlayerTable.drawTable();
            System.out.println("Take a shot!\n");
            while (this.isHavingShips) {
                String userShotInput = scanner.nextLine().trim();
                String[] numericalIndexes = userShotInput.split("[a-zA-Z\\s]+");
                String[] alphabeticalIndexes = userShotInput.split("[0-9\\s]+");
                int numericIndex = Integer.parseInt(numericalIndexes[1]);
                int alphaIndex = new String(playerTable.getVerticalIndices()).indexOf(alphabeticalIndexes[0].charAt(0));

                if (checkShotCoordinates(numericIndex, alphaIndex)) {
                    numericIndex--;
                    if (this.playerTable.getBattleCell(alphaIndex, numericIndex) == 'O') {
                        this.foggedPlayerTable.updateTable(numericIndex, alphaIndex, true);
                        this.playerTable.updateTable(numericIndex, alphaIndex, true);
                        this.foggedPlayerTable.drawTable();
                        System.out.println("You hit a ship!");
                    } else {
                        this.foggedPlayerTable.updateTable(numericIndex, alphaIndex, false);
                        this.playerTable.updateTable(numericIndex, alphaIndex, false);
                        this.foggedPlayerTable.drawTable();
                        System.out.println("You missed!");
                    }
                    break;
                }
            }
        }

        private boolean checkCellsByEqualNumeric(int minAlphaInd, int maxAlphaInd, int numInd) {
            if (numInd == 1 && minAlphaInd == 0) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10 && minAlphaInd == 0) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 1 && maxAlphaInd == 9) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10 && maxAlphaInd == 9) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (maxAlphaInd == 9 || minAlphaInd == 0) {
                for (int i = numInd - 2; i <= numInd; i++) {
                    if (maxAlphaInd == 9) {
                        for (int j = minAlphaInd - 1; j <= maxAlphaInd; ++j) {
                            if (!(playerTable.getBattleCell(j, i) == '~')) {
                                System.out.print("\nError! Cannot place it here! ");
                                return false;
                            }
                        }
                    } else {
                        for (int j = minAlphaInd; j <= maxAlphaInd + 1; ++j) {
                            if (!(playerTable.getBattleCell(j, i) == '~')) {
                                System.out.print("\nError! Cannot place it here! ");
                                return false;
                            }
                        }
                    }

                }
            } else if (numInd == 1) {
                for (int i = 0; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else if (numInd == 10) {
                for (int i = numInd - 2; i < numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            } else {
                for (int i = numInd - 2; i <= numInd; i++) {
                    for (int j = minAlphaInd - 1; j <= maxAlphaInd + 1; ++j) {
                        if (!(playerTable.getBattleCell(j, i) == '~')) {
                            System.out.print("\nError! Cannot place it here! ");
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        private boolean checkCellsByEqualAlpha(int minNumInd, int maxNumInd, int alphaInd) {
            if (alphaInd == 0 && minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 0 && maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9 && minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9 && maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (maxNumInd == 10) {
                for (int i = minNumInd - 2; i < maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (minNumInd == 1) {
                for (int i = 0; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 9) {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else if (alphaInd == 0) {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            } else {
                for (int i = minNumInd - 2; i <= maxNumInd; ++i) {
                    if (!(playerTable.getBattleCell(alphaInd, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd - 1, i) == '~') ||
                            !(playerTable.getBattleCell(alphaInd + 1, i) == '~')) {
                        System.out.print("\nError! Cannot place it here! ");
                        return false;
                    }
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10597#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 01 Jan 2023 16:21:51 UTC"
record: 4
